AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  StackName:
    Type: String
    Default: apidemo
  EnvironmentIdentifier:
    Type: String
    Default: sandbox
  EnvironmentName:
    Type: String
    Default: Sandbox
  EnvironmentSubdomain:
    Type: String
    Default: 'sandbox.'

Resources:


###################################################
# DynamoDb
###################################################

#################
# DynamoDb - RecipesTable
#################

  # Basic DynamoDB table to store recipes in
  RecipesTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName:
        Fn::Sub: ${StackName}-${EnvironmentIdentifier}-recipe
      Tags:
        - Key: "cost-allocation"
          Value:
            Fn::Sub: ${StackName}
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: created
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: status-created-index
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: created
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # Policy to access RecipesTable
  AppSyncRecipesTablePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows AppSync to access the recipes table.
      Path: /appsync/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:Query
            Resource:
              Fn::Sub: '${RecipesTable.Arn}*'

  # Role having the policy to access RecipesTable
  AppSyncRecipesTableRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "cost-allocation"
          Value:
            Fn::Sub: ${StackName}
      RoleName:
        Fn::Sub: ${StackName}-${EnvironmentIdentifier}-appsync-recipes-table-role
      ManagedPolicyArns:
        - Ref: AppSyncRecipesTablePolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com

###################################################
# AppSync
###################################################

#################
# AppSync - AppSyncApi
#################

  # AppSync GraphQL component
  AppSyncApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name:
        Fn::Sub: ${StackName}-${EnvironmentIdentifier}-api
      Tags:
        - Key: "cost-allocation"
          Value:
            Fn::Sub: ${StackName}
      XrayEnabled: true
      LogConfig: # https://github.com/aws/aws-appsync-community/issues/190
        CloudWatchLogsRoleArn:
          Fn::GetAtt: AppSyncCloudWatchRole.Arn
        ExcludeVerboseContent: FALSE
        FieldLogLevel: ERROR
      AuthenticationType: API_KEY

  # AppSync cache
  # AppSyncApiCache:
  #   Type: AWS::AppSync::ApiCache
  #   Properties:
  #     ApiCachingBehavior: PER_RESOLVER_CACHING
  #     ApiId:
  #       Fn::GetAtt:
  #         - AppSyncApi
  #         - ApiId
  #     AtRestEncryptionEnabled: false
  #     TransitEncryptionEnabled: false
  #     Ttl: 60
  #     Type: SMALL

  # Key to access AppSync using `x-api-key` header
  AppSyncApiDevKey:
    Type: AWS::AppSync::ApiKey
    Description: "Development key"
    Properties:
      ApiId:
        Fn::GetAtt:
          - AppSyncApi
          - ApiId
      # 2024-04-03T22:01:40.000Z
      Expires: 1712181700

  # Key to access AppSync using `x-api-key` header
  AppSyncApiTestKey:
    Type: AWS::AppSync::ApiKey
    Description: "Automated tests key"
    Properties:
      ApiId:
        Fn::GetAtt:
          - AppSyncApi
          - ApiId
      # 2024-04-05T04:06:40.000Z
      Expires: 1712290000

  # Role to write AppSync logs to CloudWatch
  AppSyncCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "cost-allocation"
          Value:
            Fn::Sub: ${StackName}
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com

  # GraphQL schema
  AppSyncApiSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId:
        Fn::GetAtt:
          - AppSyncApi
          - ApiId
      Definition: './appsync/schema/AppSyncApi/*.graphql' # this will be filled with all files in the path using installation script

  # AppSync none/void/blank/whatever source, if you do not need to access any resource
  NoneSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      Name: NoneSource
      Type: NONE

  # AppSync DynamoDB table source
  RecipesTableSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      Name: RecipesTableSource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn:
        Fn::GetAtt: AppSyncRecipesTableRole.Arn
      DynamoDBConfig:
        TableName:
          Ref: RecipesTable
        AwsRegion:
          Fn::Sub: "${AWS::Region}"

  # AppSync Lambda source
  NotifyNewRecipeLambdaSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      Name: NotifyNewRecipeLambdaSource
      Type: AWS_LAMBDA
      ServiceRoleArn:
        Fn::GetAtt: AppSyncNotifyNewRecipeLambdaRole.Arn
      LambdaConfig:
        LambdaFunctionArn:
          Fn::GetAtt: NotifyNewRecipeLambda.Arn


#################
# AppSync - AppSyncApiQueryVersion
#################

  # Resolver for Query.version API call
  AppSyncApiQueryVersion:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      Code: "./appsync/resolvers/build/AppSyncApi/empty.mjs" # this will be filled with content of the file using installation script
      FieldName: version
      Kind: "PIPELINE"
      PipelineConfig:
        Functions:
          - Fn::GetAtt: AppSyncApiQueryVersionFunction.FunctionId
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"
      TypeName: Query

  # Resolver pipeline function
  AppSyncApiQueryVersionFunction:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Code: "./appsync/resolvers/build/AppSyncApi/Query.version.mjs" # this will be filled with content of the file using installation script
      Name: "Query_version"
      DataSourceName:
        Fn::GetAtt: NoneSource.Name
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"

#################
# AppSync - AppSyncApiMutationRecipeCreate
#################

  AppSyncApiMutationRecipeCreate:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      Code: "./appsync/resolvers/build/AppSyncApi/empty.mjs"
      FieldName: recipeCreate
      Kind: "PIPELINE"
      PipelineConfig:
        Functions:
          - Fn::GetAtt: AppSyncApiMutationRecipeCreateFunction.FunctionId
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"
      TypeName: Mutation

  AppSyncApiMutationRecipeCreateFunction:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Code: "./appsync/resolvers/build/AppSyncApi/Mutation.recipeCreate.mjs"
      Name: "Mutation_recipeCreate"
      DataSourceName:
        Fn::GetAtt: RecipesTableSource.Name
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"

#################
# AppSync - AppSyncApiMutationRecipePatch
#################

  # Resolver for Mutation.recipePatch APi call
  # Practical example of pipeline (we check for existence of recipe before updating it)
  # And we actually reuse already defined function for that
  AppSyncApiMutationRecipePatch:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      Code: "./appsync/resolvers/build/AppSyncApi/empty.mjs"
      FieldName: recipePatch
      Kind: "PIPELINE"
      PipelineConfig:
        Functions:
          - Fn::GetAtt: AppSyncApiQueryRecipeGetByIdFunction.FunctionId
          - Fn::GetAtt: AppSyncApiMutationRecipePatchFunction.FunctionId
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"
      TypeName: Mutation

  AppSyncApiMutationRecipePatchFunction:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Code: "./appsync/resolvers/build/AppSyncApi/Mutation.recipePatch.mjs"
      Name: "Mutation_recipePatch"
      DataSourceName:
        Fn::GetAtt: RecipesTableSource.Name
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"

#################
# AppSync - AppSyncApiQueryRecipeGetById
#################

  AppSyncApiQueryRecipeGetById:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      Code: "./appsync/resolvers/build/AppSyncApi/empty.mjs"
      FieldName: recipeGetById
      Kind: "PIPELINE"
      PipelineConfig:
        Functions:
          - Fn::GetAtt: AppSyncApiQueryRecipeGetByIdFunction.FunctionId
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"
      TypeName: Query
      CachingConfig: # cache object based on ID for 2 minutes (if cache enabled)
        CachingKeys:
          - "$context.arguments.id"
        Ttl: 60

  AppSyncApiQueryRecipeGetByIdFunction:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Code: "./appsync/resolvers/build/AppSyncApi/Query.recipeGetById.mjs"
      Name: "Query_recipeGetById"
      DataSourceName:
        Fn::GetAtt: RecipesTableSource.Name
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"

#################
# AppSync - AppSyncApiQueryRecipeGetById
#################

  AppSyncApiQueryRecipeDelete:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      Code: "./appsync/resolvers/build/AppSyncApi/empty.mjs"
      FieldName: recipeDelete
      Kind: "PIPELINE"
      PipelineConfig:
        Functions:
          - Fn::GetAtt: AppSyncApiQueryRecipeDeleteFunction.FunctionId
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"
      TypeName: Mutation
      CachingConfig: # cache object based on ID for 2 minutes (if cache enabled)
        CachingKeys:
          - "$context.arguments.id"
        Ttl: 60

  AppSyncApiQueryRecipeDeleteFunction:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Code: "./appsync/resolvers/build/AppSyncApi/Mutation.recipeDelete.mjs"
      Name: "Mutation_recipeDelete"
      DataSourceName:
        Fn::GetAtt: RecipesTableSource.Name
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"

#################
# AppSync - AppSyncApiQueryRecipeGetByIdVTL
#################

  # Resolver for Query.recipeGetById_vtl API call using VTL (no pipeline needed)
  AppSyncApiQueryRecipeGetByIdVTL:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FieldName: recipeGetById_vtl
      DataSourceName:
        Fn::GetAtt: RecipesTableSource.Name
      TypeName: Query
      RequestMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.recipeGetById.request.vtl'
      ResponseMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.recipeGetById.response.vtl'

#################
# AppSync - AppSyncApiQueryTestVTL1
#################

  # Resolver for Query.testVTL1 API call to test how long 1 VTL call takes
  AppSyncApiQueryTestVTL1:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FieldName: testVTL1
      DataSourceName:
        Fn::GetAtt: NoneSource.Name
      TypeName: Query
      RequestMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.testVTL1.request.vtl'
      ResponseMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.testVTL1.response.vtl'

  AppSyncApiQueryTestVTL1Function:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Name: AppSyncApiQueryTestVTL1
      DataSourceName:
        Fn::GetAtt: NoneSource.Name
      RequestMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.testVTL1.request.vtl'
      ResponseMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.testVTL1.response.vtl'

#################
# AppSync - AppSyncApiQueryTestVTL10
#################

  # Resolver for Query.testVTL10 API call to test how long 10 VTL calls take
  AppSyncApiQueryTestVTL10:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FieldName: testVTL10
      TypeName: Query
      Kind: PIPELINE
      PipelineConfig:
        Functions:
          - Fn::GetAtt: AppSyncApiQueryTestVTL1Function.FunctionId
          - Fn::GetAtt: AppSyncApiQueryTestVTL2Function.FunctionId
          - Fn::GetAtt: AppSyncApiQueryTestVTL3Function.FunctionId
          - Fn::GetAtt: AppSyncApiQueryTestVTL4Function.FunctionId
          - Fn::GetAtt: AppSyncApiQueryTestVTL5Function.FunctionId
          - Fn::GetAtt: AppSyncApiQueryTestVTL6Function.FunctionId
          - Fn::GetAtt: AppSyncApiQueryTestVTL7Function.FunctionId
          - Fn::GetAtt: AppSyncApiQueryTestVTL8Function.FunctionId
          - Fn::GetAtt: AppSyncApiQueryTestVTL9Function.FunctionId
          - Fn::GetAtt: AppSyncApiQueryTestVTL10Function.FunctionId
      RequestMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/empty.request.vtl'
      ResponseMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/emptyJson.response.vtl'

  AppSyncApiQueryTestVTL2Function:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Name: AppSyncApiQueryTestVTL2Function
      DataSourceName:
        Fn::GetAtt: NoneSource.Name
      RequestMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.testVTL2.request.vtl'
      ResponseMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.testVTL2.response.vtl'

  AppSyncApiQueryTestVTL3Function:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Name: AppSyncApiQueryTestVTL3Function
      DataSourceName:
        Fn::GetAtt: NoneSource.Name
      RequestMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.testVTL3.request.vtl'
      ResponseMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.testVTL3.response.vtl'

  AppSyncApiQueryTestVTL4Function:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Name: AppSyncApiQueryTestVTL4Function
      DataSourceName:
        Fn::GetAtt: NoneSource.Name
      RequestMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.testVTL4.request.vtl'
      ResponseMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.testVTL4.response.vtl'

  AppSyncApiQueryTestVTL5Function:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Name: AppSyncApiQueryTestVTL5Function
      DataSourceName:
        Fn::GetAtt: NoneSource.Name
      RequestMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.testVTL5.request.vtl'
      ResponseMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.testVTL5.response.vtl'

  AppSyncApiQueryTestVTL6Function:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Name: AppSyncApiQueryTestVTL6Function
      DataSourceName:
        Fn::GetAtt: NoneSource.Name
      RequestMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.testVTL6.request.vtl'
      ResponseMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.testVTL6.response.vtl'

  AppSyncApiQueryTestVTL7Function:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Name: AppSyncApiQueryTestVTL7Function
      DataSourceName:
        Fn::GetAtt: NoneSource.Name
      RequestMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.testVTL7.request.vtl'
      ResponseMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.testVTL7.response.vtl'

  AppSyncApiQueryTestVTL8Function:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Name: AppSyncApiQueryTestVTL8Function
      DataSourceName:
        Fn::GetAtt: NoneSource.Name
      RequestMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.testVTL8.request.vtl'
      ResponseMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.testVTL8.response.vtl'

  AppSyncApiQueryTestVTL9Function:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Name: AppSyncApiQueryTestVTL9Function
      DataSourceName:
        Fn::GetAtt: NoneSource.Name
      RequestMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.testVTL9.request.vtl'
      ResponseMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.testVTL9.response.vtl'

  AppSyncApiQueryTestVTL10Function:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Name: AppSyncApiQueryTestVTL10Function
      DataSourceName:
        Fn::GetAtt: NoneSource.Name
      RequestMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.testVTL10.request.vtl'
      ResponseMappingTemplate: './appsync/resolvers/vtl/AppSyncApi/Query.testVTL10.response.vtl'

#################
# AppSync - AppSyncApiQueryTestJS1
#################

  # Resolver for Query.testJS1 API call to test how long 1 JS pipeline takes
  AppSyncApiQueryTestJS1:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      Code: "./appsync/resolvers/build/AppSyncApi/empty.mjs"
      FieldName: testJS1
      Kind: "PIPELINE"
      PipelineConfig:
        Functions:
          - Fn::GetAtt: AppSyncApiQueryTestJS1Function.FunctionId
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"
      TypeName: Query

  AppSyncApiQueryTestJS1Function:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Code: "./appsync/resolvers/build/AppSyncApi/Query.testJS1.mjs"
      Name: "Query_testJs1"
      DataSourceName:
        Fn::GetAtt: NoneSource.Name
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"

#################
# AppSync - AppSyncApiQueryTestJS10
#################

  # Resolver for Query.testJS10 API call to test how long 10 JS pipelines take
  AppSyncApiQueryTestJS10:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      Code: "./appsync/resolvers/build/AppSyncApi/empty.mjs"
      FieldName: testJS10
      Kind: "PIPELINE"
      PipelineConfig:
        Functions:
          - Fn::GetAtt: AppSyncApiQueryTestJS1Function.FunctionId
          - Fn::GetAtt: AppSyncApiQueryTestJS2Function.FunctionId
          - Fn::GetAtt: AppSyncApiQueryTestJS3Function.FunctionId
          - Fn::GetAtt: AppSyncApiQueryTestJS4Function.FunctionId
          - Fn::GetAtt: AppSyncApiQueryTestJS5Function.FunctionId
          - Fn::GetAtt: AppSyncApiQueryTestJS6Function.FunctionId
          - Fn::GetAtt: AppSyncApiQueryTestJS7Function.FunctionId
          - Fn::GetAtt: AppSyncApiQueryTestJS8Function.FunctionId
          - Fn::GetAtt: AppSyncApiQueryTestJS9Function.FunctionId
          - Fn::GetAtt: AppSyncApiQueryTestJS10Function.FunctionId
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"
      TypeName: Query

  AppSyncApiQueryTestJS2Function:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Code: "./appsync/resolvers/build/AppSyncApi/Query.testJS2.mjs"
      Name: "Query_testJs10_2"
      DataSourceName:
        Fn::GetAtt: NoneSource.Name
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"

  AppSyncApiQueryTestJS3Function:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Code: "./appsync/resolvers/build/AppSyncApi/Query.testJS3.mjs"
      Name: "Query_testJs10_3"
      DataSourceName:
        Fn::GetAtt: NoneSource.Name
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"

  AppSyncApiQueryTestJS4Function:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Code: "./appsync/resolvers/build/AppSyncApi/Query.testJS4.mjs"
      Name: "Query_testJs10_4"
      DataSourceName:
        Fn::GetAtt: NoneSource.Name
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"

  AppSyncApiQueryTestJS5Function:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Code: "./appsync/resolvers/build/AppSyncApi/Query.testJS5.mjs"
      Name: "Query_testJs10_5"
      DataSourceName:
        Fn::GetAtt: NoneSource.Name
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"

  AppSyncApiQueryTestJS6Function:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Code: "./appsync/resolvers/build/AppSyncApi/Query.testJS6.mjs"
      Name: "Query_testJs10_6"
      DataSourceName:
        Fn::GetAtt: NoneSource.Name
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"

  AppSyncApiQueryTestJS7Function:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Code: "./appsync/resolvers/build/AppSyncApi/Query.testJS7.mjs"
      Name: "Query_testJs10_7"
      DataSourceName:
        Fn::GetAtt: NoneSource.Name
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"

  AppSyncApiQueryTestJS8Function:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Code: "./appsync/resolvers/build/AppSyncApi/Query.testJS8.mjs"
      Name: "Query_testJs10_8"
      DataSourceName:
        Fn::GetAtt: NoneSource.Name
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"

  AppSyncApiQueryTestJS9Function:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Code: "./appsync/resolvers/build/AppSyncApi/Query.testJS9.mjs"
      Name: "Query_testJs10_9"
      DataSourceName:
        Fn::GetAtt: NoneSource.Name
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"

  AppSyncApiQueryTestJS10Function:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Code: "./appsync/resolvers/build/AppSyncApi/Query.testJS10.mjs"
      Name: "Query_testJs10_10"
      DataSourceName:
        Fn::GetAtt: NoneSource.Name
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"

#################
# AppSync - AppSyncApiQueryRecipeList
#################

  # Resolver for Query.recipeList API call showing use of nextToken from DynamoDB
  AppSyncApiQueryRecipeList:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      Code: "./appsync/resolvers/build/AppSyncApi/empty.mjs"
      FieldName: recipeList
      Kind: "PIPELINE"
      PipelineConfig:
        Functions:
          - Fn::GetAtt: AppSyncApiQueryRecipeListFunction.FunctionId
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"
      TypeName: Query

  AppSyncApiQueryRecipeListFunction:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Code: "./appsync/resolvers/build/AppSyncApi/Query.recipeList.mjs"
      Name: "Query_recipeList"
      DataSourceName:
        Fn::GetAtt: RecipesTableSource.Name
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"

#################
# AppSync - AppSyncApiQueryIngredientUrl
#################

  # Resolver for Ingredient.url field showing how to resolve any arbitrary type field
  AppSyncApiQueryIngredientUrl:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      Code: "./appsync/resolvers/build/AppSyncApi/empty.mjs"
      FieldName: url
      Kind: "PIPELINE"
      PipelineConfig:
        Functions:
          - Fn::GetAtt: AppSyncApiQueryIngredientUrlFunction.FunctionId
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"
      TypeName: Ingredient

  AppSyncApiQueryIngredientUrlFunction:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Code: "./appsync/resolvers/build/AppSyncApi/Ingredient.url.mjs"
      Name: "Ingredient_url"
      DataSourceName:
        Fn::GetAtt: NoneSource.Name
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"



#################
# AppSync - AppSyncApiMutationRecipeCreate2
#################

  # Resolver for Mutation.recipeCreate2, this API call directly calls Lambda after creation
  # Showcases sync Lambda call (having to wait for Lambda response)
  AppSyncApiMutationRecipeCreate2:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      Code: "./appsync/resolvers/build/AppSyncApi/empty.mjs"
      FieldName: recipeCreate2
      Kind: "PIPELINE"
      PipelineConfig:
        Functions:
          - Fn::GetAtt: AppSyncApiMutationRecipeCreateFunction.FunctionId
          - Fn::GetAtt: AppSyncApiMutationRecipeCreate2NotifyFunction.FunctionId
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"
      TypeName: Mutation

  AppSyncApiMutationRecipeCreate2NotifyFunction:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Code: "./appsync/resolvers/build/AppSyncApi/Mutation.recipeCreate2.notify.mjs"
      Name: "Mutation_recipeCreate2_notify"
      DataSourceName:
        Fn::GetAtt: NotifyNewRecipeLambdaSource.Name
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"

#################
# AppSync - AppSyncApiMutationRecipeCreate3
# SQS connection to Lambda
#################

  # Resolver for Mutation.recipeCreate3, this API call passes data to SQL, that eventually triggers Lambda
  # Showcases async Lambda call (you do not have to wait for Lambda response, but there is no response from Lambda)
  AppSyncApiMutationRecipeCreate3:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      Code: "./appsync/resolvers/build/AppSyncApi/empty.mjs"
      FieldName: recipeCreate3
      Kind: "PIPELINE"
      PipelineConfig:
        Functions:
          - Fn::GetAtt: AppSyncApiMutationRecipeCreateFunction.FunctionId
          - Fn::GetAtt: AppSyncApiMutationRecipeCreate3NotifyFunction.FunctionId
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"
      TypeName: Mutation

  AppSyncApiMutationRecipeCreate3NotifyFunction:
    Type: AWS::AppSync::FunctionConfiguration
    DependsOn: AppSyncApiSchema
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      FunctionVersion: "2018-05-29"
      Code: "./appsync/resolvers/build/AppSyncApi/Mutation.recipeCreate3.notify.mjs"
      Name: "Mutation_recipeCreate3_notify"
      DataSourceName:
        Fn::GetAtt: NotifyNewRecipeLambda2SQSSource.Name
      Runtime:
        Name: "APPSYNC_JS"
        RuntimeVersion: "1.0.0"


###################################################
# Lambdas
###################################################

#################
# NotifyNewRecipeLambda
#################

  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html

  # Lambda function definition
  # Lambda source code is eventually provided by installation script
  NotifyNewRecipeLambda:
    Type: AWS::Serverless::Function
    Properties:
      Tags:
        cost-allocation:
          Fn::Sub: ${StackName}
      Description:
        Fn::Sub: Get file upload link (presigned link)
      Handler: build/index.handler
      MemorySize: 256
      Timeout: 10
      Runtime: nodejs18.x
      Tracing: Active
      FunctionName: "NotifyNewRecipeLambda"
      InlineCode: "//test"

  # Policy allowing triggering Lambda
  AppSyncNotifyNewRecipeLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows AppSync to invoke Lambda
      Path: /appsync/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              Fn::GetAtt: NotifyNewRecipeLambda.Arn

  # Role that can trigger lambda, used form AppSync's Lambda source
  AppSyncNotifyNewRecipeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "cost-allocation"
          Value:
            Fn::Sub: ${StackName}
      RoleName:
        Fn::Sub: ${StackName}-${EnvironmentIdentifier}-appsync-notifynewrecipe-lambda-role
      ManagedPolicyArns:
        - Ref: AppSyncNotifyNewRecipeLambdaPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com

#################
# NotifyNewRecipeLambda2
#################

  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
  NotifyNewRecipeLambda2:
    Type: AWS::Serverless::Function
    Properties:
      Tags:
        cost-allocation:
          Fn::Sub: ${StackName}
      Description:
        Fn::Sub: Get file upload link (presigned link)
      Handler: build/index.handler
      MemorySize: 256
      Timeout: 10
      Runtime: nodejs18.x
      Tracing: Active
      FunctionName: "NotifyNewRecipeLambda2"
      InlineCode: "//test"
      Policies: #policies to access additional resources (SQS in this case)
        - AWSLambdaExecute # Managed Policy
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
              Resource:
                - Fn::Sub: ${NotifyNewRecipeLambda2SQS.Arn}


###################################################
# SQS
###################################################

################
# NotifyNewRecipeLambdaSQS
################

  # SQS definition
  NotifyNewRecipeLambda2SQS:
    Type: AWS::SQS::Queue
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Tags:
        - Key: "cost-allocation"
          Value:
            Fn::Sub: ${StackName}
      QueueName:
        Fn::Sub: ${StackName}-${EnvironmentIdentifier}-notifynewrecipe2-sqs
      MessageRetentionPeriod: 3600 # 1 hour
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - NotifyNewRecipeLambda2SQSDeadletterQueue
            - Arn
        maxReceiveCount: 3 # number of deliveries per 5 minutes until 1 hour
      VisibilityTimeout: 300 # 5 minutes

  # SQS DQL definition
  # if message cannot be passed from original SQS it ends up in this DQL that you can check for unprocessed messages
  NotifyNewRecipeLambda2SQSDeadletterQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Tags:
        - Key: "cost-allocation"
          Value:
            Fn::Sub: ${StackName}
      QueueName:
        Fn::Sub: ${StackName}-${EnvironmentIdentifier}-notifynewrecipe2-sqs-deadletter
      MessageRetentionPeriod: 1209600 # 14 days

  # Trigger between SQS and Lambda
  # SQS is pull based, one must pull messages from SQS
  # EventSourceMapping is a way how you can have AWS to do it automatically
  NotifyNewRecipeLambda2SQSEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn:
        Fn::GetAtt:
          - NotifyNewRecipeLambda2SQS
          - Arn
      FunctionName:
        Fn::GetAtt:
          - NotifyNewRecipeLambda2
          - Arn

  # Policy allowing sending message to SQS
  NotifyNewRecipeLambda2SQSPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows AppSync to send an SQS message to the Planner queue
      Path: /appsync/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource:
              - Fn::Sub: ${NotifyNewRecipeLambda2SQS.Arn}

  # Role having the policy allowing sending message to SQS
  AppSyncNotifyNewRecipeLambda2SQSRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "cost-allocation"
          Value: "MedicalProcedure"
      RoleName:
        Fn::Sub: ${StackName}-${EnvironmentIdentifier}-appsync-notifynewrecipelambda2sqs-sqs
      ManagedPolicyArns:
        - Ref: NotifyNewRecipeLambda2SQSPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com

  # AppSync SQS source
  NotifyNewRecipeLambda2SQSSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId:
        Fn::GetAtt: AppSyncApi.ApiId
      Name: PlannerSqsSource
      Type: HTTP
      ServiceRoleArn:
        Fn::GetAtt: AppSyncNotifyNewRecipeLambda2SQSRole.Arn
      HttpConfig:
        Endpoint:
          Fn::Sub: "https://sqs.${AWS::Region}.amazonaws.com/"
        AuthorizationConfig:
          AuthorizationType: "AWS_IAM"
          AwsIamConfig:
            SigningRegion:
              Fn::Sub: "${AWS::Region}"
            SigningServiceName: "sqs"
